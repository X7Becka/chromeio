$(function() {

	var chromeio = window.chromeio = {};
		chromeio.styles = {},
		chromeio.edit = {},
		chromeio.activeSelector,
		chromeio.activeProperty,
		chromeio.utils = {}; 
	/*
		 mimic inspector hover
	*/
	
	$('li').hover(function() {
		$(this).addClass('hovered');
	}, function() {
		$(this).removeClass('hovered');
	});
	
	
	/*
		 mimic webkit current selected line
	*/ 
	$('li').click(function() {
		$('.selected').removeClass('selected');
		$(this).addClass('selected');
	});
	
	
	/*
		mimic inspector element finder
	*/
	$("[class^=webkit], #elements-content2").hover(function(e) {
		$('.elHov').removeClass('elHov');
		$(this).addClass('elHov');
		e.stopPropagation();
	}, function(e) {
		$('.elHov').removeClass('elHov');
		$(this).removeClass('elHov');
		e.stopPropagation();
	});
	
	/*
		finding the class name
	*/ 
	$("[class^=webkit]").click(function(e) {
		
		// stop the event from bubbling up into parent spans
		e.stopPropagation();
		
		// Match the classes
		var classy = this.className.match(/webkit-[\w-]*/) + '';		
		
		// Update the style object
		if (!chromeio.styles[classy]) {
			console.log('nothing found for '+ classy);
			chromeio.styles[classy] = {
				"name" : classy,
				"color" : "#fff",
			};
		} 
		else {
			console.log('found it! we will update your styles',chromeio.styles[classy]);
		}

		chromeio.viewStyles(chromeio.styles[classy]);
	});
	
	
	/*
		View & Edit Styles Pane 
	*/
	
	chromeio.viewStyles = function(obj) {
		// check if div is already created
		if ( $('#'+obj.name)[0] ) {
			console.log('already open');
		}
		else {
			html = "<div class='element' id='"+obj.name+"'><h3>"+ obj.name +"</h3>";
			for (key in obj) {
				if (obj.hasOwnProperty(key) && key !== "name") {
					html += key + "- <input type='text' data-cssselector='"+ obj.name +"' data-cssproperty='"+key+"' class='colorwheel' value='" + obj[key] + "' /></div>";
				}
			}
			// Append to DOM
			$('.editorInner').append(html);
			// open
			$('#'+obj.name).animate({ height : 500 });
			chromeio.startColorPicker();
		}
	}
	
	/* 
		Element Input Boxes 
	*/
	
	$('.element input').live('focus',function() {
		var that = $(this),
			cssselector =  that.data('cssselector'),
			cssproperty =  that.data('cssproperty');
		
		$('input.active').removeClass('active');
		that.addClass('active'); 

		// make sure we have that object
		if (!chromeio.styles[cssselector]) { chromeio.styles[cssselector] = {}; }; 
		chromeio.activeSelector = that.data('cssselector');
		chromeio.activeProperty = that.data('cssproperty');
		console.log('set the active states');
	});
	
	
	/* 
		Colour Picker - Yeah - thats ColoUr 
	*/ 
	
	chromeio.startColorPicker = function() {
		$('.colorwheel').ColorPicker({
			onSubmit: function(hsb, hex, rgb, el) {
				$(el).val(hex);
				$(el).ColorPickerHide();
			},
			onBeforeShow: function () {
				$(this).ColorPickerSetColor(this.value);
			},
			onChange: function (hsb, hex, rgb, el) {
				oppositeHex = chromeio.utils.oppositeHex(hex); 
				$('.active').val(hex).css({ backgroundColor : "#" +hex, color : "#" + oppositeHex });

				$('.'+chromeio.activeSelector).css(chromeio.activeProperty, '#' + hex);
				chromeio.styles[chromeio.activeSelector][chromeio.activeProperty] = '#' + hex;
			}
		})
		.bind('keyup', function(){
			$(this).ColorPickerSetColor(this.value);
		});
	}
	
	/* 
		Generate CSS! 
	*/
	
	$('a#generate').click(function() {
		var html = chromeio.utils.generateCSS(); 
		$('textarea#output').html(html); 
	});


	/* 
		Chromeio Utils 
	*/

		chromeio.utils.generateCSS = function() {
			var html = "/* \n \t Generated by Chromeio! \n\t http://chrome.io \n\t Coppyright Wes Bos 2011 \n\n\t You Can load this into the editor by copying and pasting the following json string: \n\n\t" + JSON.stringify(chromeio.styles) + " \n\n */ \n\n "; 
			for (var key in chromeio.styles) {
				html += "\n#elements-content ."+key+ " {";
				var obj = chromeio.styles[key];
				for (var prop in obj) {
					property = (prop + "").toDash();
					if (prop !== "name") { html += "\n\t" + property + " : " + obj[prop] + ";" };
				}
		    	html += "\n}";
			}
			return html; 
		}

		chromeio.utils.oppositeHex = function(colour) {
			
			function decimalToHex(decimal) {
				var hex = decimal.toString(16);
				if (hex.length == 1) hex = '0' + hex;
				return hex;
			}

			function hexToDecimal(hex) {return parseInt(hex,16);}

			return decimalToHex(255 - hexToDecimal(colour.substr(0,2))) 
			+ decimalToHex(255 - hexToDecimal(colour.substr(2,2))) 
			+ decimalToHex(255 -  hexToDecimal(colour.substr(4,2)));
		}
	
	
	/* Init */
	chromeio.startColorPicker();

	String.prototype.toDash = function(){
		return this.replace(/([A-Z])/g, function($1){return "-"+$1.toLowerCase();});
	};
	
		
});